import { useCallback, useEffect, useState } from 'react';
import { ScrollView, Alert, Pressable, RefreshControl, TextInput } from 'react-native';
import { Text } from 'react-native-paper';
import { useRouter } from 'expo-router';
import { api } from '../../lib/api';
import { Event } from '../../types';
import { EventCard } from '../../components/EventCard';
import { View, Button } from 'react-native';
import { useSelectionContext } from '../../contexts/SelectionContext';
import { MaterialIcons } from '@expo/vector-icons';
import { EventSearchBar } from '@/components/EventSearchBar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';




export default function AdminEventsScreen() {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const [refreshing, setRefreshing] = useState(false);
  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const { selectionMode, setSelectionMode } = useSelectionContext();
  const [showSelectionFooter, setShowSelectionFooter] = useState(false);
  const [search, setSearch] = useState('');
    const insets = useSafeAreaInsets();
    
  const toggleSelection = (id: number) => {
    setSelectedIds(prev =>
      prev.includes(id) ? prev.filter(e => e !== id) : [...prev, id]
  );
};

  const handleLongPress = (id: number) => {
    console.log('LONG PRESS', id);
    setSelectionMode(true);
    setSelectedIds([id]);
};

 const onRefresh = useCallback(() => {
    setRefreshing(true);
    loadEvents().finally(() => setRefreshing(false));
  }, []);

  const loadEvents = async () => {
    try {
      const res = await api.get('/events?is_approved=false&order=desc&sort_by=event_date&limit=10');
      setEvents(res.data);
    } catch (err) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: number) => {
    Alert.alert('–£–¥–∞–ª–µ–Ω–∏–µ', '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', [
      { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
      {
        text: '–£–¥–∞–ª–∏—Ç—å',
        style: 'destructive',
        onPress: async () => {
          try {
            await api.delete(`/events/${id}`);
            setEvents(prev => prev.filter(e => e.id !== id));
            Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
          } catch {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å');
          }
        },
      },
    ]);
  };

  const handleApprove = async (id: number) => {
    try {
      await api.put(`/events/${id}`, { is_approved: true });
      setEvents(prev =>
        prev.map(e => (e.id === id ? { ...e, is_approved: true } : e))
      );
      Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', err);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
    }
  };

  useEffect(() => {
    loadEvents();
  }, []);
 
  useEffect(() => {
    let timeout: any;
    if (selectionMode) {
      timeout = setTimeout(() => {
        setShowSelectionFooter(true);
      }, 10); 
    } else {
      setShowSelectionFooter(false);
    }
    return () => clearTimeout(timeout);
  }, [selectionMode]);

  

  if (loading) return <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>;

  return (
    
    <View style={{ flex: 1 }}>
      <View
  style={{
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    paddingTop: insets.top - 8,
    paddingBottom: 0,
    backgroundColor: 'white',
    zIndex: 10,
    padding: 16,
    borderBottomWidth: 1,
    borderColor: '#ddd',
  }}
>
  {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ø–æ–∏—Å–∫ + –∫–Ω–æ–ø–∫–∞ */}
  <View style={{ flexDirection: 'row', alignItems: 'center' }}>
    {/* –ü–æ–∏—Å–∫ —Å flex: 1 */}
    <View style={{ flex: 1 }}>
      <EventSearchBar
        searchValue={search}
        onSearchChange={setSearch}
      />
    </View>

    {/* –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å" */}
    <Pressable
      onPress={() => {
        if (selectionMode) {
          setSelectionMode(false);
          setSelectedIds([]);
        } else {
          setSelectionMode(true);
        }
      }}
      style={{
        marginLeft: 12,
        backgroundColor: 'rgba(0, 0, 0, 0.6)',
        paddingVertical: 8,
        paddingHorizontal: 16,
        borderRadius: 20,
      }}
    >
      <Text style={{ color: 'white', fontSize: 14, fontWeight: '500' }}>
        {selectionMode ? '–û—Ç–º–µ–Ω–∞' : '–í—ã–±—Ä–∞—Ç—å'}
      </Text>
    </Pressable>
  </View>
</View>

      {showSelectionFooter && (
  <View
    style={{
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      height: 80,
      backgroundColor: '#111', // —á—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ —á—ë—Ä–Ω–æ–≥–æ
      borderTopWidth: 1,
      borderColor: '#333',
      justifyContent: 'center',
      paddingHorizontal: 20,
      zIndex: 20,
    }}
  >
    <View
      style={{
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
      <Text
        style={{
          fontSize: 18,
          fontWeight: '600',
          color: 'white',
          textAlign: 'center',
          flex: 1,
        }}
      >
        –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
      </Text>

      {/* –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞ */}
      <View
        style={{
          flexDirection: 'row',
          position: 'absolute',
          right: 0,
          alignItems: 'center',
        }}
      >
        {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
        <Pressable
          onPress={() => {
            if (selectedIds.length === 0) return;
            Alert.alert('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ?', '', [
              { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
              {
                text: '–£–¥–∞–ª–∏—Ç—å',
                style: 'destructive',
                onPress: async () => {
                  for (const id of selectedIds) {
                    try {
                      await api.delete(`/events/${id}`);
                    } catch {}
                  }
                  setEvents(prev => prev.filter(e => !selectedIds.includes(e.id)));
                  setSelectedIds([]);
                  setSelectionMode(false);
                },
              },
            ]);
          }}
          style={{ marginLeft: 12, padding: 6 }}
        >
          <MaterialIcons
            name="delete-forever"
            size={32}
            color={selectedIds.length === 0 ? '#555' : '#F44336'}
          />
        </Pressable>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è */}
        <Pressable
          onPress={async () => {
            if (selectedIds.length === 0) return;
            try {
              for (const id of selectedIds) {
                await api.put(`/events/${id}`, { is_approved: true });
              }
              setEvents(prev =>
                prev.map(e =>
                  selectedIds.includes(e.id) ? { ...e, is_approved: true } : e
                )
              );
              setSelectedIds([]);
              setSelectionMode(false);
              Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–¥–æ–±—Ä–µ–Ω—ã');
            } catch {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            }
          }}
          style={{ marginLeft: 12, padding: 6 }}
        >
          <MaterialIcons
            name="check-circle"
            size={28}
            color={selectedIds.length === 0 ? '#555' : '#4CAF50'}
          />
        </Pressable>
      </View>
    </View>
  </View>
)}



  
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º */}
      <ScrollView contentContainerStyle={{ paddingTop: insets.top + 72, paddingHorizontal: 16, paddingBottom: 32 }}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={onRefresh}
        progressViewOffset={insets.top + 80} // üëà —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–Ω–∏–∑
        />
              }>
        {events
  .filter(event =>
    event.title.toLowerCase().includes(search.toLowerCase())
  )
  .map((event) => (
          <EventCard
            key={event.id}
            event={event}
            isAdmin
            onEdit={() => router.push(`/(admin)/edit-event/${event.id}`)}
            onDelete={() => handleDelete(event.id)}
            onApprove={() => handleApprove(event.id)}
            onPressDetails={() => {
              if (selectionMode) {
                toggleSelection(event.id);
              } else {
                router.push(`/events/${event.id}?admin=true`);
              }
            }}
            onLongPress={() => handleLongPress(event.id)}
            isSelected={selectedIds.includes(event.id)}
            selectionMode={selectionMode}
          />
        ))}
      </ScrollView>
    </View>
  );
} 